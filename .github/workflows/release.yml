name: Release SDK

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"
          cache: true
          cache-dependency-path: |
            **/go.mod
            **/go.sum
          
      - name: Validate version format
        id: validate-version
        run: |
          if [[ ! ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be in format v1.0.0"
            exit 1
          fi

      - name: Run tests
        id: run-tests
        if: steps.validate-version.outcome == 'success'
        run: go test -v ./...

      - name: Import GPG key
        id: import-gpg-key
        if: steps.run-tests.outcome == 'success'
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          
          echo 'use-agent' > ~/.gnupg/gpg.conf
          echo 'pinentry-mode loopback' >> ~/.gnupg/gpg.conf
          echo 'allow-loopback-pinentry' > ~/.gnupg/gpg-agent.conf
          
          echo "${{ secrets.MAGALUBOT_GPG_PRIVATE_KEY }}" | gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.MAGALUBOT_GPG_PASSPHRASE }}" --import


      - name: Config Git
        id: config-git
        if: steps.import-gpg-key.outcome == 'success'
        run: |
          git config --global user.email "${{vars.MAGALUBOT_EMAIL}}"
          git config --global user.name "${{vars.MAGALUBOT_USER_NAME}}"
          git config --global commit.gpgsign true
          git config --global tag.gpgsign true
          git config --global user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          git config --global gpg.program $(which gpg)
          git config --global gpg.passphrase "${MAGALUBOT_GPG_PASSPHRASE}"

      
      - name: Create and push tag
        id: create-and-push-tag
        if: steps.config-git.outcome == 'success'
        env:
          GPG_PASSPHRASE: ${{ secrets.MAGALUBOT_GPG_PASSPHRASE }}
        run: |
          echo "RELOADAGENT" | gpg-connect-agent
          echo 'echo $GPG_PASSPHRASE | gpg --batch --no-tty --yes --pinentry-mode loopback --passphrase-fd 0 --sign' > sign.sh
          chmod +x sign.sh
          git config --global gpg.program "$(pwd)/sign.sh"
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      - name: Publish to Go package registry
        id: publish-to-go-package-registry
        if: steps.create-and-push-tag.outcome == 'success'
        env:
          GOPROXY: proxy.golang.org
        run: |
          go mod tidy
          GOPROXY=proxy.golang.org go list -m github.com/${GITHUB_REPOSITORY}@${{ github.event.inputs.version }}
