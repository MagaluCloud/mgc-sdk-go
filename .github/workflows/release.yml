name: Release SDK
on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Validate version format
        run: |
          if [[ ! ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be in format v1.0.0"
            exit 1
          fi

      - name: Run tests
        run: go test -v ./...

      - name: Import GPG key
        run: |
          echo "allow-preset-passphrase" > ~/.gnupg/gpg-agent.conf
          gpg-connect-agent reloadagent /bye
          echo "${{ secrets.MAGALUBOT_GPG_PRIVATE_KEY }}" | gpg --batch --yes --passphrase "${{ secrets.MAGALUBOT_GPG_PASSPHRASE }}" --import
          echo 'export GPG_TTY=$(tty)' >> ~/.bashrc
          export GPG_TTY=$(tty)
      - name: Create and push tag
        env:
          GIT_ASKPASS: /bin/true
          GPG_TTY: $(tty)
        run: |
          git config --local user.email "${{vars.MAGALUBOT_EMAIL}}"
          git config --local user.name "${{vars.MAGALUBOT_USER_NAME}}"
          git config --local commit.gpgsign true
          git config --local tag.gpgsign true
          git config --local user.signingkey $(gpg --list-secret-keys --keyid-format LONG | grep sec | awk '{print $2}' | cut -d'/' -f2)
          git tag -a ${{ github.event.inputs.version }} -m "Release ${{ github.event.inputs.version }}"
          git push origin ${{ github.event.inputs.version }}

      - name: Publish to Go package registry
        env:
          GOPROXY: proxy.golang.org
        run: |
          go mod tidy
          GOPROXY=proxy.golang.org go list -m github.com/${GITHUB_REPOSITORY}@${{ github.event.inputs.version }}
